"""
cluster_interpretation.py

This module contains functions for interpreting the results of clustering on a dataset. It includes functions for:
- Generating word clouds for each cluster
- Identifying the top features for each cluster
- Creating a radar chart visualization of the top features for each cluster

The main function 'run' executes the cluster interpretation pipeline on the input DataFrame, including generating word
clouds for each cluster, identifying the top features for each cluster, and creating a radar chart visualization of the
top features for each cluster.

Functions:
- run(df, clusters_labels, kmeans_model, item_names, Features_used, num_top_features=3)
"""


import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.metrics import silhouette_score
from sklearn.compose import ColumnTransformer
from wordcloud import WordCloud
import matplotlib.pyplot as plt
import math

def generate_wordclouds(cluster_labels, data, item_names):
    unique_labels = np.unique(cluster_labels)
    n_clusters = len(unique_labels)

    grid_columns = min(3, n_clusters)
    grid_rows = math.ceil(n_clusters / grid_columns)

    fig, axes = plt.subplots(grid_rows, grid_columns, figsize=(15, 5 * grid_rows))

    for idx, label in enumerate(unique_labels):
        cluster_item_names = item_names[cluster_labels == label]
        text = ' '.join(str(name) for name in cluster_item_names)

        wordcloud = WordCloud(background_color='white', max_words=100).generate(text)

        row_idx = idx // grid_columns
        col_idx = idx % grid_columns

        if grid_rows == 1:
            ax = axes[col_idx]
        else:
            ax = axes[row_idx, col_idx]

        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        ax.set_title(f"Cluster {label} Word Cloud")

    for idx in range(n_clusters, grid_rows * grid_columns):
        row_idx = idx // grid_columns
        col_idx = idx % grid_columns

        if grid_rows == 1:
            axes[col_idx].axis("off")
        else:
            axes[row_idx, col_idx].axis("off")

    plt.tight_layout()
    plt.subplots_adjust(hspace=0.5, wspace=0.3)  # Adjust the spacing between subplots
    plt.show()

def top_features_per_cluster(centroids, feature_names, n_features=5):
    top_features = {}
    for i, centroid in enumerate(centroids):
        top_n = sorted(range(len(centroid)), key=lambda k: centroid[k], reverse=True)[:n_features]
        top_features[i] = [(feature_names[f], centroid[f]) for f in top_n]

    for cluster, features in top_features.items():
        print(f"Cluster {cluster}:")
        for feature, value in features:
            print(f"  {feature}: {value}")

    return top_features


def radar_chart(df, cluster_labels, top_features, num_clusters, num_top_features):
    # Calculate the mean values for the top features in each cluster
    df['cluster'] = cluster_labels
    top_features_list = list(set([feature for features in top_features.values() for feature, _ in features]))
    cluster_means = df.groupby('cluster').mean()[top_features_list]

    # Create a radar chart
    angles = np.linspace(0, 2 * np.pi, num_top_features, endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))

    for i in range(num_clusters):
        values = cluster_means.loc[i, [feature for feature, _ in top_features[i]]].tolist()  # <-- Use only top features for each cluster
        values += values[:1]
        ax.plot(angles, values, label=f'Cluster {i}')

    # Add the feature labels to the chart
    plt.xticks(angles[:-1], [feature for feature, _ in top_features[0]], fontsize=10)

    ax.set_rlabel_position(30)
    plt.yticks(fontsize=8)
    plt.legend(loc='upper right', bbox_to_anchor=(1.1, 1.1))

    # Show the radar chart
    plt.show()





def run(df, clusters_labels, kmeans_model, item_names, Features_used, num_top_features=3):
    """
    Executes the cluster interpretation pipeline on the input DataFrame, including generating word clouds for each cluster,
    identifying the top features for each cluster, and creating a radar chart visualization of the top features for each cluster.

    Args:
        df (pd.DataFrame): The input DataFrame containing preprocessed data.
        clusters_labels (pd.Series): The cluster labels generated by running KMeans clustering on the input DataFrame.
        kmeans_model (sklearn.cluster.KMeans): The trained KMeans model used to generate the cluster labels.
        item_names (pd.Series): The names or IDs of the items in the input DataFrame.
        Features_used (list): The names of the features used in the input DataFrame.
        num_top_features (int): The number of top features to include in the radar chart visualization (default: 3).

    Returns:
        None
    """
    generate_wordclouds(clusters_labels, df, item_names)

    top_features = top_features_per_cluster(kmeans_model.cluster_centers_, Features_used)

    #n_clusters = kmeans_model.n_clusters
    #radar_chart(df, clusters_labels, top_features, n_clusters, num_top_features)
